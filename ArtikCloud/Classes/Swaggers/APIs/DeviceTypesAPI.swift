//
// DeviceTypesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit



public class DeviceTypesAPI: APIBase {
    /**
     
     Get Available Manifest Versions
     
     - parameter deviceTypeId: (path) deviceTypeId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAvailableManifestVersions(deviceTypeId deviceTypeId: String, completion: ((data: ManifestVersionsEnvelope?, error: ErrorType?) -> Void)) {
        getAvailableManifestVersionsWithRequestBuilder(deviceTypeId: deviceTypeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     Get Available Manifest Versions
     
     - parameter deviceTypeId: (path) deviceTypeId 
     - returns: Promise<ManifestVersionsEnvelope>
     */
    public class func getAvailableManifestVersions(deviceTypeId deviceTypeId: String) -> Promise<ManifestVersionsEnvelope> {
        let deferred = Promise<ManifestVersionsEnvelope>.pendingPromise()
        getAvailableManifestVersions(deviceTypeId: deviceTypeId) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     Get Available Manifest Versions
     
     - GET /devicetypes/{deviceTypeId}/availablemanifestversions
     - Get a Device Type's available manifest versions
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "versions" : [ "" ]
  }
}}]
     
     - parameter deviceTypeId: (path) deviceTypeId 

     - returns: RequestBuilder<ManifestVersionsEnvelope> 
     */
    public class func getAvailableManifestVersionsWithRequestBuilder(deviceTypeId deviceTypeId: String) -> RequestBuilder<ManifestVersionsEnvelope> {
        var path = "/devicetypes/{deviceTypeId}/availablemanifestversions"
        path = path.stringByReplacingOccurrencesOfString("{deviceTypeId}", withString: "\(deviceTypeId)", options: .LiteralSearch, range: nil)
        let URLString = ArtikCloudAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ManifestVersionsEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get Device Type
     
     - parameter deviceTypeId: (path) deviceTypeId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDeviceType(deviceTypeId deviceTypeId: String, completion: ((data: DeviceTypeEnvelope?, error: ErrorType?) -> Void)) {
        getDeviceTypeWithRequestBuilder(deviceTypeId: deviceTypeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     Get Device Type
     
     - parameter deviceTypeId: (path) deviceTypeId 
     - returns: Promise<DeviceTypeEnvelope>
     */
    public class func getDeviceType(deviceTypeId deviceTypeId: String) -> Promise<DeviceTypeEnvelope> {
        let deferred = Promise<DeviceTypeEnvelope>.pendingPromise()
        getDeviceType(deviceTypeId: deviceTypeId) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     Get Device Type
     
     - GET /devicetypes/{deviceTypeId}
     - Retrieves a Device Type
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "hasCloudConnector" : true,
    "issuerDn" : "aeiou",
    "description" : "aeiou",
    "oid" : "aeiou",
    "published" : true,
    "rsp" : true,
    "tags" : [ {
      "isCategory" : true,
      "name" : "aeiou"
    } ],
    "vid" : "aeiou",
    "lastUpdated" : 123456789,
    "uid" : "aeiou",
    "approved" : true,
    "uniqueName" : "aeiou",
    "protected" : true,
    "latestVersion" : 123,
    "inStore" : true,
    "name" : "aeiou",
    "id" : "aeiou",
    "ownedByCurrentUser" : true
  }
}}]
     
     - parameter deviceTypeId: (path) deviceTypeId 

     - returns: RequestBuilder<DeviceTypeEnvelope> 
     */
    public class func getDeviceTypeWithRequestBuilder(deviceTypeId deviceTypeId: String) -> RequestBuilder<DeviceTypeEnvelope> {
        var path = "/devicetypes/{deviceTypeId}"
        path = path.stringByReplacingOccurrencesOfString("{deviceTypeId}", withString: "\(deviceTypeId)", options: .LiteralSearch, range: nil)
        let URLString = ArtikCloudAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<DeviceTypeEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get Device Types
     
     - parameter name: (query) Device Type name 
     - parameter offset: (query) Offset for pagination. (optional)
     - parameter count: (query) Desired count of items in the result set (optional)
     - parameter tags: (query) Elements tagged with the list of tags. (comma separated) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDeviceTypes(name name: String, offset: Int?, count: Int?, tags: String?, completion: ((data: DeviceTypesEnvelope?, error: ErrorType?) -> Void)) {
        getDeviceTypesWithRequestBuilder(name: name, offset: offset, count: count, tags: tags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     Get Device Types
     
     - parameter name: (query) Device Type name 
     - parameter offset: (query) Offset for pagination. (optional)
     - parameter count: (query) Desired count of items in the result set (optional)
     - parameter tags: (query) Elements tagged with the list of tags. (comma separated) (optional)
     - returns: Promise<DeviceTypesEnvelope>
     */
    public class func getDeviceTypes(name name: String, offset: Int?, count: Int?, tags: String?) -> Promise<DeviceTypesEnvelope> {
        let deferred = Promise<DeviceTypesEnvelope>.pendingPromise()
        getDeviceTypes(name: name, offset: offset, count: count, tags: tags) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     Get Device Types
     
     - GET /devicetypes
     - Retrieves Device Types
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "offset" : 123,
  "data" : {
    "deviceTypes" : [ {
      "hasCloudConnector" : true,
      "issuerDn" : "aeiou",
      "description" : "aeiou",
      "oid" : "aeiou",
      "published" : true,
      "rsp" : true,
      "tags" : [ {
        "isCategory" : true,
        "name" : "aeiou"
      } ],
      "vid" : "aeiou",
      "lastUpdated" : 123456789,
      "uid" : "aeiou",
      "approved" : true,
      "uniqueName" : "aeiou",
      "protected" : true,
      "latestVersion" : 123,
      "inStore" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "ownedByCurrentUser" : true
    } ]
  },
  "count" : 123
}}]
     
     - parameter name: (query) Device Type name 
     - parameter offset: (query) Offset for pagination. (optional)
     - parameter count: (query) Desired count of items in the result set (optional)
     - parameter tags: (query) Elements tagged with the list of tags. (comma separated) (optional)

     - returns: RequestBuilder<DeviceTypesEnvelope> 
     */
    public class func getDeviceTypesWithRequestBuilder(name name: String, offset: Int?, count: Int?, tags: String?) -> RequestBuilder<DeviceTypesEnvelope> {
        let path = "/devicetypes"
        let URLString = ArtikCloudAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "name": name,
            "offset": offset,
            "count": count,
            "tags": tags
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<DeviceTypesEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get Latest Manifest Properties
     
     - parameter deviceTypeId: (path) Device Type ID. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getLatestManifestProperties(deviceTypeId deviceTypeId: String, completion: ((data: ManifestPropertiesEnvelope?, error: ErrorType?) -> Void)) {
        getLatestManifestPropertiesWithRequestBuilder(deviceTypeId: deviceTypeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     Get Latest Manifest Properties
     
     - parameter deviceTypeId: (path) Device Type ID. 
     - returns: Promise<ManifestPropertiesEnvelope>
     */
    public class func getLatestManifestProperties(deviceTypeId deviceTypeId: String) -> Promise<ManifestPropertiesEnvelope> {
        let deferred = Promise<ManifestPropertiesEnvelope>.pendingPromise()
        getLatestManifestProperties(deviceTypeId: deviceTypeId) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     Get Latest Manifest Properties
     
     - GET /devicetypes/{deviceTypeId}/manifests/latest/properties
     - Get a Device Type's manifest properties for the latest version.
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "properties" : {
      "fields" : {
        "key" : ""
      },
      "actions" : {
        "key" : ""
      }
    }
  }
}}]
     
     - parameter deviceTypeId: (path) Device Type ID. 

     - returns: RequestBuilder<ManifestPropertiesEnvelope> 
     */
    public class func getLatestManifestPropertiesWithRequestBuilder(deviceTypeId deviceTypeId: String) -> RequestBuilder<ManifestPropertiesEnvelope> {
        var path = "/devicetypes/{deviceTypeId}/manifests/latest/properties"
        path = path.stringByReplacingOccurrencesOfString("{deviceTypeId}", withString: "\(deviceTypeId)", options: .LiteralSearch, range: nil)
        let URLString = ArtikCloudAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ManifestPropertiesEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get manifest properties
     
     - parameter deviceTypeId: (path) Device Type ID. 
     - parameter version: (path) Manifest Version. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getManifestProperties(deviceTypeId deviceTypeId: String, version: String, completion: ((data: ManifestPropertiesEnvelope?, error: ErrorType?) -> Void)) {
        getManifestPropertiesWithRequestBuilder(deviceTypeId: deviceTypeId, version: version).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     Get manifest properties
     
     - parameter deviceTypeId: (path) Device Type ID. 
     - parameter version: (path) Manifest Version. 
     - returns: Promise<ManifestPropertiesEnvelope>
     */
    public class func getManifestProperties(deviceTypeId deviceTypeId: String, version: String) -> Promise<ManifestPropertiesEnvelope> {
        let deferred = Promise<ManifestPropertiesEnvelope>.pendingPromise()
        getManifestProperties(deviceTypeId: deviceTypeId, version: version) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     Get manifest properties
     
     - GET /devicetypes/{deviceTypeId}/manifests/{version}/properties
     - Get a Device Type's manifest properties for a specific version.
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "properties" : {
      "fields" : {
        "key" : ""
      },
      "actions" : {
        "key" : ""
      }
    }
  }
}}]
     
     - parameter deviceTypeId: (path) Device Type ID. 
     - parameter version: (path) Manifest Version. 

     - returns: RequestBuilder<ManifestPropertiesEnvelope> 
     */
    public class func getManifestPropertiesWithRequestBuilder(deviceTypeId deviceTypeId: String, version: String) -> RequestBuilder<ManifestPropertiesEnvelope> {
        var path = "/devicetypes/{deviceTypeId}/manifests/{version}/properties"
        path = path.stringByReplacingOccurrencesOfString("{deviceTypeId}", withString: "\(deviceTypeId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{version}", withString: "\(version)", options: .LiteralSearch, range: nil)
        let URLString = ArtikCloudAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ManifestPropertiesEnvelope>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

}
