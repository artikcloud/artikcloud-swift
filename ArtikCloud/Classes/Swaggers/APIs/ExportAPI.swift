//
// ExportAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit



public class ExportAPI: APIBase {
    /**
     
     Create Export Request
     
     - parameter exportRequestInfo: (body) ExportRequest object that is passed in the body
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func exportRequest(exportRequestInfo exportRequestInfo: ExportRequestInfo, completion: ((data: ExportRequestResponse?, error: ErrorType?) -> Void)) {
        exportRequestWithRequestBuilder(exportRequestInfo: exportRequestInfo).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     Create Export Request
     
     - parameter exportRequestInfo: (body) ExportRequest object that is passed in the body
     - returns: Promise<ExportRequestResponse>
     */
    public class func exportRequest(exportRequestInfo exportRequestInfo: ExportRequestInfo) -> Promise<ExportRequestResponse> {
        let deferred = Promise<ExportRequestResponse>.pendingPromise()
        exportRequest(exportRequestInfo: exportRequestInfo) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     Create Export Request
     
     - POST /messages/export
     - Export normalized messages. The following input combinations are supported:<br/><table><tr><th>Combination</th><th>Parameters</th><th>Description</th></tr><tr><td>Get by users</td><td>uids</td><td>Search by a list of User IDs. For each user in the list, the current authenticated user must have read access over the specified user.</td></tr><tr><td>Get by devices</td><td>sdids</td><td>Search by Source Device IDs.</td></tr><tr><td>Get by device types</td><td>uids,sdtids</td><td>Search by list of Source Device Type IDs for the given list of users.</td></tr><tr><td>Get by trial</td><td>trialId</td><td>Search by Trial ID.</td></tr><tr><td>Get by combination of parameters</td><td>uids,sdids,sdtids</td><td>Search by list of Source Device IDs. Each Device ID must belong to a Source Device Type ID and a User ID.</td></tr><tr><td>Common</td><td>startDate,endDate,order,format,url,csvHeaders</td><td>Parameters that can be used with the above combinations.</td></tr></table>
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "data" : {
    "sdtids" : "aeiou",
    "trialId" : "aeiou",
    "sdids" : "aeiou",
    "endDate" : 123456789,
    "uids" : "aeiou",
    "format" : "aeiou",
    "exportId" : "aeiou",
    "startDate" : 123456789,
    "url" : "aeiou",
    "csvHeaders" : true,
    "order" : "aeiou"
  }
}}]
     
     - parameter exportRequestInfo: (body) ExportRequest object that is passed in the body

     - returns: RequestBuilder<ExportRequestResponse> 
     */
    public class func exportRequestWithRequestBuilder(exportRequestInfo exportRequestInfo: ExportRequestInfo) -> RequestBuilder<ExportRequestResponse> {
        let path = "/messages/export"
        let URLString = ArtikCloudAPI.basePath + path
        
        let parameters = exportRequestInfo.encodeToJSON() as? [String:AnyObject]

        let requestBuilder: RequestBuilder<ExportRequestResponse>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Get Export History
     
     - parameter trialId: (query) Filter by trialId.
     - parameter count: (query) Pagination count.
     - parameter offset: (query) Pagination offset.
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getExportHistory(trialId trialId: String?, count: Int?, offset: Int?, completion: ((data: ExportHistoryResponse?, error: ErrorType?) -> Void)) {
        getExportHistoryWithRequestBuilder(trialId: trialId, count: count, offset: offset).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     Get Export History
     
     - parameter trialId: (query) Filter by trialId.
     - parameter count: (query) Pagination count.
     - parameter offset: (query) Pagination offset.
     - returns: Promise<ExportHistoryResponse>
     */
    public class func getExportHistory(trialId trialId: String?, count: Int?, offset: Int?) -> Promise<ExportHistoryResponse> {
        let deferred = Promise<ExportHistoryResponse>.pendingPromise()
        getExportHistory(trialId: trialId, count: count, offset: offset) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     Get Export History
     
     - GET /messages/export/history
     - Get the history of export requests.
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "data" : {
    "exports" : [ {
      "request" : {
        "sdtids" : "aeiou",
        "trialId" : "aeiou",
        "sdids" : "aeiou",
        "endDate" : 123456789,
        "uids" : "aeiou",
        "format" : "aeiou",
        "startDate" : 123456789,
        "order" : "aeiou"
      },
      "fileSize" : 123456789,
      "totalMessages" : 123456789,
      "exportId" : "aeiou",
      "expirationDate" : 123456789,
      "md5" : "aeiou",
      "status" : "aeiou"
    } ]
  },
  "offset" : 123456789,
  "count" : 123456789
}}]
     
     - parameter trialId: (query) Filter by trialId.
     - parameter count: (query) Pagination count.
     - parameter offset: (query) Pagination offset.

     - returns: RequestBuilder<ExportHistoryResponse> 
     */
    public class func getExportHistoryWithRequestBuilder(trialId trialId: String?, count: Int?, offset: Int?) -> RequestBuilder<ExportHistoryResponse> {
        let path = "/messages/export/history"
        let URLString = ArtikCloudAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "trialId": trialId,
            "count": count,
            "offset": offset
        ]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ExportHistoryResponse>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
    }

    /**
     
     Get Export Result
     
     - parameter exportId: (path) Export ID of the export query.
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getExportResult(exportId exportId: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        getExportResultWithRequestBuilder(exportId: exportId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     Get Export Result
     
     - parameter exportId: (path) Export ID of the export query.
     - returns: Promise<String>
     */
    public class func getExportResult(exportId exportId: String) -> Promise<String> {
        let deferred = Promise<String>.pendingPromise()
        getExportResult(exportId: exportId) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     Get Export Result
     
     - GET /messages/export/{exportId}/result
     - Retrieve result of the export query in tgz format. The tar file may contain one or more files with the results.
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter exportId: (path) Export ID of the export query.

     - returns: RequestBuilder<String> 
     */
    public class func getExportResultWithRequestBuilder(exportId exportId: String) -> RequestBuilder<String> {
        var path = "/messages/export/{exportId}/result"
        path = path.stringByReplacingOccurrencesOfString("{exportId}", withString: "\(exportId)", options: .LiteralSearch, range: nil)
        let URLString = ArtikCloudAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<String>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

    /**
     
     Check Export Status
     
     - parameter exportId: (path) Export ID of the export query.
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getExportStatus(exportId exportId: String, completion: ((data: ExportStatusResponse?, error: ErrorType?) -> Void)) {
        getExportStatusWithRequestBuilder(exportId: exportId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }

    /**
     
     Check Export Status
     
     - parameter exportId: (path) Export ID of the export query.
     - returns: Promise<ExportStatusResponse>
     */
    public class func getExportStatus(exportId exportId: String) -> Promise<ExportStatusResponse> {
        let deferred = Promise<ExportStatusResponse>.pendingPromise()
        getExportStatus(exportId: exportId) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     
     Check Export Status
     
     - GET /messages/export/{exportId}/status
     - Check status of the export query.
     - OAuth:
       - type: oauth2
       - name: artikcloud_oauth
     - examples: [{contentType=application/json, example={
  "exportId" : "aeiou",
  "ttl" : "aeiou",
  "expirationDate" : 123456789,
  "md5" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter exportId: (path) Export ID of the export query.

     - returns: RequestBuilder<ExportStatusResponse> 
     */
    public class func getExportStatusWithRequestBuilder(exportId exportId: String) -> RequestBuilder<ExportStatusResponse> {
        var path = "/messages/export/{exportId}/status"
        path = path.stringByReplacingOccurrencesOfString("{exportId}", withString: "\(exportId)", options: .LiteralSearch, range: nil)
        let URLString = ArtikCloudAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
        let parameters = APIHelper.rejectNil(nillableParameters)

        let requestBuilder: RequestBuilder<ExportStatusResponse>.Type = ArtikCloudAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
    }

}
